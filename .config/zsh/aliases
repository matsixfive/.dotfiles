#!/usr/bin/env zsh

# This file contains all of my aliases and function which
# make my life easier

alias ls="eza --group-directories-first --icons"
alias la="eza --group-directories-first --icons -a"
alias ll="eza --group-directories-first --icons -l"
alias lal="eza --group-directories-first --icons -al"
alias lla="eza --group-directories-first --icons -la"
alias lp="eza --group-directories-first -T -L 4 --icons --git -al --no-time --no-user --no-filesize --no-permissions --git-ignore"

alias lg="lazygit"

alias py="python3"
alias venv="source ./venv/bin/activate"

alias :q="echo 'ðŸ–•'"

alias gh-new="gh repo create --private --remote=origin --source=. --push"
alias gh-open="gh repo view --web"

alias please="sudo"
alias reload="source ~/.zshrc"

alias open="wsl-open"
alias shutdown="wsl.exe --terminate Arch"

search() {
	if [ -z "$1" ]; then
		echo "Usage: search <query>"
		return 1
	fi
	encoded=$(printf '%s' "$*" | jq -sRr @uri)
	xdg-open "https://www.duckduckgo.com/?q=$encoded"
}

# just running `git` will run `git status`
git() {
	if [[ $# -eq 0 ]]; then
		command git status
	else
		command git "$@"
	fi
}

f() {
	local directories=(
		"$HOME/dev"
		"$HOME/uni"
		"$HOME/work"
	)

	local repos=()

	# git repos
	for dir in "${directories[@]}"; do
		while IFS= read -r gitdir; do
			local dir_name="$(dirname "$gitdir")"
			repos+=("$dir_name")
		done < <(fd -H --type d ".git" "$dir" 2>/dev/null)
	done

	# other
	for dir in "${directories[@]}"; do
		while IFS= read -r dir_name; do
			repos+=("$dir_name")
		done < <(fd . --max-depth 1 "$dir" 2>/dev/null)
	done

	local repos_n=$(
		printf "%s\n" "${repos[@]}" |
			# get the last modified date
			xargs -I{} stat -c '%Z %n' {} |
			# sort and remove duplicates
			sort -nru  |
			# remove the first column
			cut -d' ' -f2- |
			# replace home with ~
			sed "s|^$HOME|~|"
		)

	local selected_repo=$(
		printf "%s\n" "$repos_n" |
			# use skim to select a file
			sk --reverse --preview="$HOME/.local/bin/inspect '$(echo "{}" | sed "s|^~|$HOME|")'" --preview-window="right:33%" |
			# replace ~ with $HOME
			sed "s|^~|$HOME|"
		)

	if [ -n "$selected_repo" ]; then
			cd "$selected_repo"
	fi
}

config() {
	local winappdata=$(wslpath -u "$(cd /mnt/c && cmd.exe /c echo %appdata% | tr -d '\r')")
	local winhome=$(wslpath -u "$(cd /mnt/c && cmd.exe /c echo %userprofile% | tr -d '\r')")

	local directories=(
		"$HOME/.dotfiles"
	)

	local files=(
		"$winhome/Documents/ahk"
		"$winappdata/alacritty/alacritty.toml"
	)

	for dir in "${directories[@]}"; do
		while IFS= read -r dir_name; do
			files+=("$dir_name")
		done < <(fd . -t f --max-depth 1 --hidden "$dir" 2>/dev/null)
	done

	local directories_two=(
		"$HOME/.dotfiles/.config"
	)

	for dir in "${directories_two[@]}"; do
		while IFS= read -r dir_name; do
			files+=("$dir_name")
		done < <(fd . --max-depth 1 "$dir" 2>/dev/null)
	done


	local files_n=$(
	printf "%s\n" "${files[@]}" |
		# get the last modified date
		xargs -I{} stat -c '%Z %n' {} |
		# sort and remove duplicates
		sort -nru  |
		# remove the first column
		cut -d' ' -f2- |
		# replace home with ~
		sed "s|^$HOME|~|"
	)

	local selected_file=$(
		printf "%s\n" "$files_n" |
			# use skim to select a file
			sk --reverse --preview="$HOME/.local/bin/inspect '$(echo "{}" | sed "s|^~|$HOME|")'" --preview-window="right:33%" |
			# replace ~ with $HOME
			sed "s|^~|$HOME|"
		)

	if [ -n "$selected_file" ]; then
		if [[ -d "$selected_file" ]]; then
			cd  "$selected_file"
			nvim .
		elif [[ -f "$selected_file" ]]; then
			nvim  "$selected_file"
		fi
	fi
}

function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	IFS= read -r -d '' cwd < "$tmp"
	[ -n "$cwd" ] && [ "$cwd" != "$PWD" ] && builtin cd -- "$cwd"
	rm -f -- "$tmp"
}
